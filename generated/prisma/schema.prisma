// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews  Review[]
  orders   Order[]
  wishlist Wishlist?
  cart     Cart?
}

model Book {
  id          String   @id @default(uuid())
  title       String
  description String
  author      String
  price       Float
  stock       Int
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Order {
  id              String      @id @default(uuid())
  name            String
  email           String
  shippingAddress String
  paymentMethod   String
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  orderId String
  bookId  String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book    Book   @relation(fields: [bookId], references: [id])
}

model Wishlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String         @unique
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  wishlistId String
  bookId     String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id])

  @@unique([wishlistId, bookId])
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String     @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId String
  bookId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book   Book   @relation(fields: [bookId], references: [id])

  @@unique([cartId, bookId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
